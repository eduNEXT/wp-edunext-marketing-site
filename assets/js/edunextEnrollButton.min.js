'use strict';

var ENEXT = ENEXT || {};
var ENEXT_SRV = ENEXT_SRV || {};

ENEXT.registration = (function($){

  var buttonAnchorClass = ".ednx-enroll-button-js";
  var openedxDomain = ENEXT_SRV.lms_base_url;
  var enrollmentApiLocation = openedxDomain + ENEXT_SRV.enrollment_api_location;

  var template = function(url, btnLabel, containerClasses, buttonClasses) {
    return '' +
      '<div class="' + containerClasses + '">' +
      '<a class="' + buttonClasses + '" href="' + url + '">' + btnLabel + '</a>' +
      '</div>' +
      '';
  }

  var renderInvitationOnly = function($anchor) {
    var settings = window[$anchor.data('settings')];

    var containerClasses = settings.container_class_invitation_only || settings.container_class_generic;
    var buttonClasses = settings.button_class_invitation_only || settings.button_class_generic;
    var colorClass = settings.color_class_invitation_only || settings.color_class_generic;
    var label = settings.label_invitation_only;

    $anchor.html(template("#", label, containerClasses, buttonClasses));
    $anchor.find('a').addClass(colorClass);
  }

  var renderGoToCourse = function($anchor, courseID) {
    var settings = window[$anchor.data('settings')];

    var containerClasses = settings.container_class_go_to_course || settings.container_class_generic;
    var buttonClasses = settings.button_class_go_to_course || settings.button_class_generic;
    var colorClass = settings.color_class_go_to_course || settings.color_class_generic;
    var label = settings.label_go_to_course;

    var url = openedxDomain + "/courses/" + courseID + "/info";
    $anchor.html(template(url, label, containerClasses, buttonClasses));
    $anchor.find('a').addClass(colorClass);
  }

  var renderCourseHasNotStarted = function($anchor) {
    var settings = window[$anchor.data('settings')];

    var containerClasses = settings.container_class_course_has_not_started || settings.container_class_generic;
    var buttonClasses = settings.button_class_course_has_not_started || settings.button_class_generic;
    var colorClass = settings.color_class_course_has_not_started || settings.color_class_generic;
    var label = settings.label_course_has_not_started;

    var url = openedxDomain + "/dashboard/";
    $anchor.html(template(url, label, containerClasses, buttonClasses));
    $anchor.find('a').addClass(colorClass);
    // TODO: add a message with the course start date
  }

  var renderEnroll = function($anchor, courseID) {
    var settings = window[$anchor.data('settings')];

    var containerClasses = settings.container_class_enroll || settings.container_class_generic;
    var buttonClasses = settings.button_class_enroll || settings.button_class_generic;
    var colorClass = settings.color_class_enroll || settings.color_class_generic;
    var label = settings.label_enroll;

    var queryStr = "course_id=" + courseID + "&enrollment_action=enroll";
    var url = openedxDomain + "/register?" + queryStr;
    $anchor.html(template(url, label, containerClasses, buttonClasses));
    $anchor.find('a').addClass(colorClass);
  }

  var renderEnrollmentClosed = function($anchor) {
    var settings = window[$anchor.data('settings')];

    var containerClasses = settings.container_class_enrollment_closed || settings.container_class_generic;
    var buttonClasses = settings.button_class_enrollment_closed || settings.button_class_generic;
    var colorClass = settings.color_class_enrollment_closed || settings.color_class_generic;
    var label = settings.label_enrollment_closed;

    $anchor.html(template("#", label, containerClasses, buttonClasses));
    $anchor.find('a').addClass(colorClass);
  }

  var getCourseData = function(enrollmentApiLocation, courseID, enrollmentData, $anchor) {
    var urlCourse = enrollmentApiLocation + 'course/' + courseID + '?include_expired=1';

    var courseXhr = $.ajax({
      url: urlCourse,
      type: "GET",
      dataType: 'json',
      xhrFields: {
           withCredentials: true
      }
    })
    .done(function(data) {
      var courseData = data;

      var amIEnrolled = Boolean($.map(enrollmentData, function(row) {
        if (row["course_details"]["course_id"] == courseID) {
          return true;
        }
      }).length);

      var hasCourseStarted = (new Date(Date.parse(courseData.course_start))) <= Date.now() || false;

      var isInvitationOnly = courseData.invite_only || false;

      var isRegistrationOpen = ( new Date(Date.parse(courseData.enrollment_start) || Date.now()) <= Date.now() )
                            && ( Date.now() <= new Date(Date.parse(courseData.enrollment_end) || Date.now()) );

      // Big decisition tree
      if (amIEnrolled) {
        if (hasCourseStarted) {
          renderGoToCourse($anchor, courseID)
        }
        else {
          renderCourseHasNotStarted($anchor);
        }
      }
      else {
        if (isInvitationOnly) {
          renderInvitationOnly($anchor);
        }
        else {
          if (isRegistrationOpen) {
            renderEnroll($anchor, courseID);
          }
          else {
            renderEnrollmentClosed($anchor);
          }
        }
      }
    });
  }

  var handleClick = function(event) {};

  var init = function() {
    // find the enrollment information for the user
    var urlEnrollments = enrollmentApiLocation + 'enrollment';

    // Potencially global vars
    var enrollmentData;

    var enrollmentsXhr = $.ajax({
      url: urlEnrollments,
      type: "GET",
      dataType: 'json',
      xhrFields: {
           withCredentials: true
      }
    })
    .done(function(data) {
      enrollmentData = data;
    })
    .fail(function() {
      // Do Nothing for now
      // renderError
      // course_is is wrong
    })
    .always(function() {

      $(buttonAnchorClass).each(function(index, elem) {
        var $anchor = $(elem);
        var courseID = $anchor.data("course-id");

        $anchor.on('click', handleClick);
        getCourseData(enrollmentApiLocation, courseID, enrollmentData, $anchor)
      });
    });
  }

  return {
    init: init
  }

})(jQuery);
ENEXT.registration.init();
